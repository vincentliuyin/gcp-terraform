File: ./networking/provider.tf
terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "5.8.0"
    }
  }

  backend "gcs" {
    bucket  = "terraform-state-vincent-demo"
    prefix  = "network/state/${terraform.workspace}"
  }
}

provider "google" {
  credentials = file("/home/vliu/gcp-key/gcp-learning-401106-860e4685de9d.json")
  project     = "gcp-learning-401106"
  region      = local.region_mapping[terraform.workspace]
  # zone        = "us-central1-c"
}

locals {
  region_mapping = {
    "us-east1-test"      = "us-east1"
    "us-east1-dev"      = "us-east1"
    "us-east1-prod"      = "us-east1"
    "europe-west1"  = "europe-west1"

  }
}
File: ./networking/main.tf
data "google_compute_network" "existing_vpc" {
  name = var.vpc_name
}

resource "google_compute_subnetwork" "subnet" {
  name          = "vincent-demo-subnet-${terraform.workspace}"
  network       = data.google_compute_network.existing_vpc.id
  ip_cidr_range = var.subnet_ip_cidr
}

# Add more subnetwork resources as needed

File: ./networking/variables.tf
variable "vpc_name" {
  description = "The name of the existing VPC."
  type        = string
  default     = "vpc-vincent-demo"
}

# variable "region" {
#   description = "The region where to create the subnets."
#   type        = string
#   default     = "us-central1"
# }

variable "subnet_ip_cidr" {
  description = "The IP CIDR range for the subnet."
  type        = string
  default     = "10.0.10.0/24"
}

# Add more variables if needed

File: ./networking/outputs.tf
output "vpc_id" {
  value       = data.google_compute_network.existing_vpc.id
  description = "The ID of the existing VPC."
}

output "subnet_ids" {
  value       = [google_compute_subnetwork.subnet.id]
  description = "A list of IDs of the created subnets."
}

File: ./networking/workspace/us-east1-dev.tfvars
subnet_ip_cidr = "10.0.2.0/24"

File: ./networking/workspace/us-east1-prod.tfvars
subnet_ip_cidr = "10.0.3.0/24"

File: ./networking/workspace/us-east1-test.tfvars
subnet_ip_cidr = "10.0.1.0/24"

File: ./networking/workspace/europe-west1.tfvars
subnet_ip_cidr = "10.0.4.0/24"

File: ./storage/provider.tf
terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "5.8.0"
    }
  }

  backend "gcs" {
    bucket  = "terraform-state-vincent-demo"
    prefix  = "storage/state/${terraform.workspace}"
  }
}

provider "google" {
  credentials = file("/home/vliu/gcp-key/gcp-learning-401106-860e4685de9d.json")
  project     = "gcp-learning-401106"
  region      = local.region_mapping[terraform.workspace]
  # zone        = "us-central1-c"
}

locals {
  region_mapping = {
    "us-east1-test"      = "us-east1"
    "us-east1-dev"      = "us-east1"
    "us-east1-prod"      = "us-east1"
    "europe-west1"  = "europe-west1"

  }
}
File: ./storage/main.tf
resource "google_storage_bucket" "bucket" {
  name          = "vincent-demo-bucket-${terraform.workspace}"
  location      = "US"
  force_destroy = true

  uniform_bucket_level_access = true
}

resource "google_storage_bucket_iam_binding" "public_access" {
  bucket = google_storage_bucket.bucket.name
  role   = "roles/storage.objectViewer"

  members = [
    "allUsers",
  ]
}

resource "local_file" "example" {
  content  = var.cloud_storage_content
  filename = "${path.module}/example.txt"
}

resource "null_resource" "upload_file" {
  depends_on = [google_storage_bucket.bucket, local_file.example]

  provisioner "local-exec" {
    command = <<EOF
      gsutil cp ${local_file.example.filename} gs://${google_storage_bucket.bucket.name}/
      rm ${local_file.example.filename}
    EOF
  }
}

File: ./storage/variables.tf
variable "bucket_name" {
  description = "The name of the Google Cloud Storage bucket."
  type        = string
  default     = "vincent-demo-bucket"
}

variable "cloud_storage_content" {
  description = "The content to be written to the cloud storage file"
  type        = string
  default     = "Hello from GCP cloud storage"
}
File: ./storage/outputs.tf
output "uploaded_file_url" {
  value       = "https://storage.googleapis.com/${google_storage_bucket.bucket.name}/example.txt"
  description = "The URL of the uploaded file."
}

File: ./terraform-state-bucket/provider.tf
terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "5.8.0"
    }
  }
}

provider "google" {
  credentials = file("/home/vliu/gcp-key/gcp-learning-401106-860e4685de9d.json")
  project     = "gcp-learning-401106"
  region      = "us-central1"
  zone        = "us-central1-c"
}

File: ./terraform-state-bucket/main.tf
resource "google_storage_bucket" "terraform_state" {
  name          = "terraform-state-vincent-demo"
  location      = "US"
  force_destroy = true

  versioning {
    enabled = true
  }


  labels = {
    devoteam = "true"
  }
}

File: ./terraform-state-bucket/outputs.tf
output "bucket_name" {
  value = google_storage_bucket.terraform_state.name
}

File: ./security/provider.tf
terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "5.8.0"
    }
  }

  backend "gcs" {
    bucket  = "terraform-state-vincent-demo"
    prefix  = "security/state/${terraform.workspace}"
  }
}

provider "google" {
  credentials = file("/home/vliu/gcp-key/gcp-learning-401106-860e4685de9d.json")
  project     = "gcp-learning-401106"
  region      = local.region_mapping[terraform.workspace]
  # zone        = "us-central1-c"
}

locals {
  region_mapping = {
    "us-east1-test"      = "us-east1"
    "us-east1-dev"      = "us-east1"
    "us-east1-prod"      = "us-east1"
    "europe-west1"  = "europe-west1"

  }
}
File: ./security/main.tf
# # Access the remote state
# data "terraform_remote_state" "network" {
#   backend = "gcs"
#   config = {
#     bucket = "terraform-state-vincent-demo"
#     prefix = "network/state"
#   }
# }

# Firewall resource
resource "google_compute_firewall" "firewall" {
  name    = "vincent-demo-firewall-${terraform.workspace}"
  network = data.terraform_remote_state.network.outputs.vpc_id

  allow {
    protocol = "tcp"
    ports    = ["22", "80", "8080"]
  }

  target_tags   = ["${var.firewall_target_tag}"]
  source_ranges = ["0.0.0.0/0"]
}

File: ./security/variables.tf
variable "firewall_target_tag" {
  description = "Target tag for the firewall rule"
  type        = string
  default     = "web"
}

File: ./security/outputs.tf
output "firewall_target_tag" {
  value       = var.firewall_target_tag
  description = "The target tag used in the firewall rule."
}

File: ./compute/app.py
from flask import Flask
import socket
import os
import requests

app = Flask(__name__)

@app.route('/')
def hello():
    # Get the hostname
    hostname = socket.gethostname()
    
    # Get the cloud storage link from the environment variable
    Storage_link = os.getenv('STORAGE_LINK')

    # Initialize web_content
    web_content = "storage content has problem"

    # Try to fetch content from cloud storage link if available
    if Storage_link:
        try:
            response = requests.get(Storage_link)
            if response.status_code == 200:
                web_content = f"<p>{response.text}</p><p>(Content fetched from cloud storage)</p>"
            else:
                web_content += " (unable to fetch)"
        except Exception as e:
            web_content += f" (Error: {e})"

    return f"<!DOCTYPE html><html><body><h1>Flask App on: {hostname}</h1>{web_content}</body></html>"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
File: ./compute/provider.tf
terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "5.8.0"
    }
  }

  backend "gcs" {
    bucket  = "terraform-state-vincent-demo"
    prefix  = "compute/state/${terraform.workspace}"
  }
}

provider "google" {
  credentials = file("/home/vliu/gcp-key/gcp-learning-401106-860e4685de9d.json")
  project     = "gcp-learning-401106"
  region      = local.region_mapping[terraform.workspace]
  # zone        = "us-central1-c"
}

locals {
  region_mapping = {
    "us-east1-test"      = "us-east1"
    "us-east1-dev"      = "us-east1"
    "us-east1-prod"      = "us-east1"
    "europe-west1"  = "europe-west1"


  }
}
File: ./compute/main.tf
data "terraform_remote_state" "network" {
  backend = "gcs"
  config = {
    bucket = "terraform-state-vincent-demo"
    prefix = "network/state/${terraform.workspace}"
  }
}

data "terraform_remote_state" "storage" {
  backend = "gcs"
  config = {
    bucket = "terraform-state-vincent-demo"
    prefix = "storage/state/${terraform.workspace}"
  }
}

data "terraform_remote_state" "security" {
  backend = "gcs"
  config = {
    bucket = "terraform-state-vincent-demo"
    prefix = "security/state/${terraform.workspace}"
  }
}

# VM Instance
resource "google_compute_instance" "vm_instance" {
  name         = "vincent-demo-vm-${terraform.workspace}"
  machine_type = "f1-micro"
  zone         = "us-central1-c"

  boot_disk {
    initialize_params {
      image = "ubuntu-os-cloud/ubuntu-2004-lts"
    }
  }

  network_interface {
    network    = data.terraform_remote_state.network.outputs.vpc_id
    subnetwork = data.terraform_remote_state.network.outputs.subnet_ids[0]

    access_config {

    }
  }

metadata = {
  ssh-keys = "${var.ssh_username}:${file(var.public_ssh_key_path)}"
  "startup-script" = <<EOF
    #!/bin/bash
    apt update
    apt install -y python3 python3-pip
    pip3 install Flask requests

    cat <<EOPY > /home/vincent/app.py
    from flask import Flask
    import socket
    import os
    import requests

    app = Flask(__name__)

    @app.route('/')
    def hello():
        hostname = socket.gethostname()
        storage_link = os.getenv('STORAGE_LINK')
        web_content = "Storage content has problem"

        if storage_link:
            try:
                response = requests.get(storage_link)
                if response.status_code == 200:
                    web_content = f"<p>{response.text}</p><p>(Content fetched from cloud storage)</p>"
                else:
                    web_content += " (unable to fetch)"
            except Exception as e:
                web_content += f" (Error: {e})"

        return f"<!DOCTYPE html><html><body><h1>Flask App on: {hostname}</h1>{web_content}</body></html>"

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=8080)
    EOPY

    export STORAGE_LINK=${data.terraform_remote_state.storage.outputs.uploaded_file_url}
    nohup python3 /home/vincent/app.py &
  EOF
}


#   tags = [data.terraform_remote_state.security.outputs.firewall_target_tag]
  tags = ["web"]
}




File: ./compute/variables.tf
# variable "vm_name" {
#   description = "Name of the VM instance"
#   type        = string
#   default     = "vincent-demo-vm"
# }

variable "public_ssh_key_path" {
  description = "Path to the public SSH key"
  type        = string
  default     = "/home/vliu/.ssh/id_ed25519.pub"
}

variable "ssh_username" {
  description = "SSH username"
  type        = string
  default     = "vincent"
}

File: ./compute/outputs.tf
# Outputs
output "vm_instance_public_ip" {
  value       = google_compute_instance.vm_instance.network_interface[0].access_config[0].nat_ip
  description = "Public IP address of the VM instance"
}
