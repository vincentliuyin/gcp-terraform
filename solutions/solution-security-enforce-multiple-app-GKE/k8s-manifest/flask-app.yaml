apiVersion: v1
kind: Namespace
metadata:
  name: app1
  labels:
    pod-security.kubernetes.io/enforce: "restricted"
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: app1-quota
  namespace: app1
spec:
  hard:
    pods: "10"
    requests.cpu: "1"
    requests.memory: 1Gi
    limits.cpu: "2"
    limits.memory: 2Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flask-app-serviceaccount
  namespace: app1
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: app1
  name: flask-app-role
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: flask-app-rolebinding
  namespace: app1
subjects:
- kind: ServiceAccount
  name: flask-app-serviceaccount
  namespace: app1
roleRef:
  kind: Role
  name: flask-app-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: flask-app-network-policy
  namespace: app1
spec:
  podSelector:
    matchLabels:
      app: ubuntu-flask
  policyTypes:
  - Ingress
  ingress:
  - from: []
    ports:
    - protocol: TCP
      port: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
  namespace: app1
spec:
  type: NodePort
  selector:
    app: ubuntu-flask
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30007
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ubuntu-flask-deployment
  namespace: app1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ubuntu-flask
  template:
    metadata:
      labels:
        app: ubuntu-flask
    spec:
      # restartPolicy: Always
      serviceAccountName: flask-app-serviceaccount
      containers:
      - name: flask-app
        image: liuyouxi1/python-flask-app
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: APP_NAME
          value: "<p>APP1</p>"
        - name: WEB_CONTENT
          value: "<p>This is the web content</p>"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            memory: "128Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "500m"
      tolerations:
      - key: "special"
        operator: "Equal"
        value: "yes"
        effect: "NoSchedule"
      nodeSelector:
        type: "special"

